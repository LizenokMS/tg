from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

bot = Bot(token="secret")
dp = Dispatcher(bot)
try:
    with open ("sp_gr.txt", "r", encoding="utf-8") as file:
        students = [line.rstrip("\n")  for line in file]
        students = list(filter(None, students))
except FileNotFoundError:
    print (f"–§–∞–π–ª 'sp_gr.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    buttons = [
        [types.KeyboardButton(text="Help")],
        [types.KeyboardButton(text="–ß—Ç–æ-—Ç–æ")]
               ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons,
                                         resize_keyboard=True)

    await message.answer(text="üèÜ–ü—Ä–∏–≤–µ—Ç, <em>–≤–≤–µ–¥–∏ —Å–æ—é —Ñ–∞–º–∏–ª–∏—é</em>",
                         parse_mode="HTML",
                         reply_markup=keyboard)

HELP_COMMAND = """–≠—Ç–æ—Ç –±–æ—Ç –¥–∞—Å—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –Ω–∞ –∑–∞—á–µ—Çü´°
–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥üí•
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—Éüí•
"""

@dp.message_handler(lambda message: message.text == "Help")
async def help1_command(message: types.Message):
    await message.answer(text=HELP_COMMAND, parse_mode="HTML")
    await message.delete()
    
@dp.message_handler(commands=["help"])
async def help2_command(message: types.Message):
    await message.answer(text=HELP_COMMAND, parse_mode="HTML")

@dp.message_handler()
async def zadaniya(message: types.Message):
    import random

    a = random.choice(zadaniya)
    found = False
    for name in students:
        if name.startswith(message.text):
            found = True
            break
    if found:
       await bot.send_ (text=f"–ó–∞–¥–∞–Ω–∏–µ: {a}") 
    else:
        await message.answer(text="–¢–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
